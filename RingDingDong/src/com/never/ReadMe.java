package com.never;
/**
 * @author 봉준
 * 
 * >> 이번 깃 사용의 이해 << 
 *
 * 1. 깊게 생각하지 마시길 바랍니다.
 * 2. 원리 원칙 다 버리고, 몇 가지 가정을 하고 진행하겠습니다.
 * 3. 우선 우리가 같은 채팅 프로그램을 개발하고 있지만,
 * 		각자 다른 파트의 분야를 분업 형태로 진행하고 있다는 가정입니다.
 *  	(상진씨는 서버를 개발하고 저는 디자인, 한울씨는 클라이언트, 요한씨는 튜팅 이런식으로..) 
 * 5. 각각 다른 작업이라 각자의 브랜치에서 개발을 하고 이 작업은 다른 파트에 영향을 주지 않습니다.
 * 6. 그러다가 일정부분 개발이 되었다고 가정하고 각자의 파트를 합칠 것입니다.
 * 7. 본디 서로 독립적 작업을 했다면 겹치는 부분이 거의 없어서 모아서 합치면 끝날 작업입니다.
 * 8. 하지만 실제 저희는 모든 부분에서 같은 자바 파일을 공유해야 하는 상황입니다.
 * 		(이런 상황을 막기 위해 각자의 패키지ㅡ 독립적인 공간 ㅡ 를 만들어 둔 것입니다.)
 * 9. 그래서 합치는 부분에서 필연적으로 발생하는 충돌을 피하고자 이와 같은 가정하고 있습니다.
 * 10. 결론적으로 어떻게 합칠것인가?
 * 11. 내일(1일) 정오 기준 6시간  간격으로 각 브랜치를 마스터에 머지 할 예정입니다.
 * 		(이 때 공유해야만 되는 상진씨 서버나 클라이언트 레이아웃 등을 마스터 Project 패키지에 올리고 다시 브랜치를 나눕니다.)
 * 12. 브랜치가 나뉜 이후에는 Project에 공유된 파일들을 자신의 패키지에 복사해서 각자 적용해서 사용합니다.
 * 13. 즉 마스터에 머지되서 Project가 버전 업 되는 때,(브랜치가 나뉘기 전)에만 Project 에 접근 하고 그 외에는 수정하지 않습니다.
 * 14. 그러다가 각자 작업 패키지가 필요 없을 정도로 Project 각자의 소스가 합쳐지면 각자의 패키지를 지워도 무방합니다.
 * 		(사실 지금 하려는 작업에서 각자의 구분된 패키지가 깃에서의 브랜치와 비슷한 역할을 합니다.)
 * 16. 이와같은 가정이 필요한 이유는 지금 하려는 프로젝트에서 깃을 사용한 협업이 오히려 독이되기 때문입니다.
 * 		본래의 협업에서 .java 파일을 두 명이 동시에 코딩하는 일은 원칙에 어긋납니다.
 * 		만약 그래야만 한다면 반드시 브랜치를 나누고 서로 같은 작업을 하다가 머지를 할 때 더 잘 된 쪽을 택하고 모자란 쪽은 버려집니다.
 * 17. 그래서 저희 또한 원칙에는 어긋나지만 최대한 협업에 비슷한 모양으로 가기위한 가정과 시나리오 입니다.
 * 18. 부디 잘 되어서 좋은 결과 있었으면 좋겠습니다.
 *
 * 	
 ******여기까지 읽고 이해가 안되시는 분은 반드시 재문의 바랍니다.	
 *
 * >> 폴더 분류 기준 <<  
 * 
 * /data/
 * 		각자 성에 따라 분류한 개인 패키지.
 * 		해당 위치에서 개인 작업 하시면됩니다.
 * 
 * /project/
 * 		개인 작업하다가 합쳐질 패키지.
 * 		일정 시간 진척이 생기면 머지해서 합쳐진 결과물을 보여줍니다.
 * 		하지만 우리 작업이 병행되는 부분이 너무 많아서
 * 		이 부분은 네 명이 다 모였을 때 같이 수정해야 합니다.
 * 
 * /share/
 * 		공통적으로 사용하거나 친목 도모용 패키지.
 * 		같이 봐서 좋은 문서라던가 사진 같은 것들을 공유합니다.

 * 
 * >> 지켜주세요. <<
 * 
 * 1. 각자 자신의 브랜치에서 작업을 합니다.( 자신의 성 )
 * 2. commit은  최대 1시간 간격으로 알아서 하시면됩니다. 단, 즉시 remote에 push를 합니다.
 * 3. 절대 다른 사람이 작업하는 패키지나 파일에는 동의 없이 접근하시면 안됩니다.
 * 3. 각자 소스는 만약의 경우를 대비해서 항상 백업합니다.
 * 4. 머지 전까지 마스터 브랜치에서 작업하지 않습니다.
 * 5. pull -> commit -> push 이 순서대로만 진행하시면 패키지가 구분되어 있어서 문제가 없습니다.
 * 6. 뭔가 찜찜하면 무조건 pull을 하고 나머지 작업을 하시면 됩니다.
 * 
 * 
 * 
 * 
 * 
**/